/**

 * To run webpack, please see the package.json file -> scripts section. But in short:

 * local run:

 * - npm install

 * - npm run watch (automatic refresh of browser)

 *

 * production run:

 * - npm install

 * - npm run production (minify, uglyfy, so on)

 *

 * Minimal node version is 8.13.x. Recommended version is 10.16.3 (server version). Currently (7-11-2019) not working node >= 11

 * To see documentation: https://laravel-mix.com/

 */

 
let mix = require('laravel-mix');

const PATHS = {
  proxy: 'dev.flash-dance.net'
};


/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

const fs = require('fs');
const path = require('path');

let getFiles = function (dir, ext) {
    // get all 'files' in this directory=

    // filter directories

    return fs.readdirSync(dir).filter(file => {
        return fs.statSync(`${dir}/${file}`).isFile();
    });

};


// mix.js('assets/js/vue/vue.js', 'assets/dist/vue.min.js').vue();


getFiles('assets/js/', 'js').forEach(function (filepath) {
    mix.js('assets/js/' + filepath, 'assets/dist/' + path.basename(filepath, '.js') + '.min.js');
});


getFiles('assets/scss/', 'scss').forEach(function (filepath) {
    mix.sass('assets/scss/' + filepath, 'assets/dist/' + path.basename(filepath, '.scss') + '.min.css');
});


/*###############################################################

            You can edit below, but you shouldn't

################################################################*/

 

mix.disableNotifications();

mix.options({

    processCssUrls: false // by default mix makes full urls out of everything. We don't want that

});

mix.browserSync({
    ui: false,
    injectChanges: true,
    notify: false,
    host: 'localhost',
    port: 5858,
    proxy: `${PATHS.proxy}`,
    logLevel: 'silent',
    files: ['**/*.php', '**/*.js', '**/*.vue', '**/*.scss'] // all the file types you want webpack to watch. **/* = all folders, all files
});

mix.webpackConfig({
    externals: {
        jquery: 'jQuery',
    }
});

mix.sourceMaps();

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });